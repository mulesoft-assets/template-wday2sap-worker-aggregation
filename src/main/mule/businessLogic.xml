<?xml version="1.0" encoding="UTF-8"?>

<mule  xmlns:sap="http://www.mulesoft.org/schema/mule/sap"
      xmlns:workday="http://www.mulesoft.org/schema/mule/workday"
      xmlns:email="http://www.mulesoft.org/schema/mule/email" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/email http://www.mulesoft.org/schema/mule/email/current/mule-email.xsd
http://www.mulesoft.org/schema/mule/workday http://www.mulesoft.org/schema/mule/workday/current/mule-workday.xsd
http://www.mulesoft.org/schema/mule/sap http://www.mulesoft.org/schema/mule/sap/current/mule-sap.xsd">

	
	<flow name="businesslogicFlow">
		<ee:transform doc:name="Set payload" doc:id="e5bbd480-9365-403f-8238-2ca6e424a99b" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
[]]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<scatter-gather doc:name="Scatter-Gather">
            <route>
				<ee:transform doc:name="Prepare Get Workers request" doc:id="5ddb1536-1e04-4131-b020-a946b4d430b1" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
ns ns0 urn:com.workday/bsvc

output application/xml
---
{
	ns0#Get_Workers_Request: {
		ns0#Request_Criteria: {
			ns0#Exclude_Inactive_Workers: true
		},
		ns0#Response_Group: {
			ns0#Include_Reference: true,
			ns0#Include_Personal_Information: true
		}
	}
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<workday:human-resources operation="Get_Workers" doc:name="Get Workers from Workday Human Resource" doc:id="7a20e6d7-8a0f-4025-8c0f-a75237a96626" config-ref="Workday_Config"/>
				<ee:transform doc:name="Transform Workday response" doc:id="f2114fbc-b82d-48ed-be3b-980252e6f446" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
ns ns0 urn:com.workday/bsvc
---
payload.ns0#Get_Workers_Response.ns0#Response_Data.*ns0#Worker map ((worker , indexOfWorker) -> {
	Id: worker.ns0#Worker_Reference.ns0#ID,
	Name: worker.ns0#Worker_Data.ns0#Personal_Data.ns0#Name_Data.ns0#Legal_Name_Data.ns0#Name_Detail_Data.@ns0#Formatted_Name,
	Email: worker.ns0#Worker_Data.ns0#Personal_Data.ns0#Contact_Data.ns0#Email_Address_Data.ns0#Email_Address,
	Username: worker.ns0#Worker_Data.ns0#User_ID
})]]></ee:set-payload>
					</ee:message>
				</ee:transform>
            </route>
			<route >
				<ee:transform doc:name="Set SAP XML request" doc:id="ebdd4aab-f75f-445b-bdea-7947af607ac0" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/xml
---
{
  "BAPI_EMPLOYEE_GETDATA": {
    "import": {
      "LASTNAME_M": "*"
    }
  }
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<sap:execute-synchronous-remote-function-call doc:name="Query employees from SAP" doc:id="e3e4b965-3169-4a9f-8a00-59ff1937bcfc" config-ref="SAP_Outbound" key="BAPI_EMPLOYEE_GETDATA"/>
				<ee:transform doc:name="Convert SAP response to workers" doc:id="cae35bd2-d5c3-4e2e-8424-aaaf22f1f30e" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload."BAPI_EMPLOYEE_GETDATA".tables."PERSONAL_DATA".*row map
{
	Id: $.PERNO,
	(Name: if($.FSTNAME_M != null and $.LASTNAME_M != null) $.FSTNAME_M ++ " " ++ $.LASTNAME_M else if ($.FSTNAME_M == null) $.LASTNAME_M else $.FSTNAME_M),
	Username: using (employeeId = $.PERNO) (payload."BAPI_EMPLOYEE_GETDATA".tables."COMMUNICATION".*row filter ($.PERNO == employeeId))[0].USERID,
  	Email: using (employeeId = $.PERNO) lower((payload."BAPI_EMPLOYEE_GETDATA".tables."COMMUNICATION".*row filter ($.PERNO == employeeId))[0].USRID_LONG)  	
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
</route>
        </scatter-gather>
        <ee:transform doc:name="Aggregate results and transform to CSV" doc:id="fd27ba32-c22a-436c-8550-75136a9c04cf">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/csv separator=","
import mergeWith from dw::core::Objects
var workers = payload["0"].payload map (item) -> {
	"IDInWorkday": item.Id,
	"NameInWorkday": item.Name,
	"Email": item.Email,
	"UserNameInWorkday": item.Username
}
var users = payload["1"].payload map (item) -> {
	"IDInSAP": item.Id,
	"NameInSAP": item.Name,
	"Email": item.Email,
	"UserNameInSAP": item.Username
}
var mergedItems =  (
                workers map ((item) -> item mergeWith ((users filter ($.Email == item.Email))[0]
                    default {IDInSAP: "", NameInSAP: "", UserNameInSAP: ""}
                ))
            ) distinctBy $.Email
            ++ (
                users map ((item) -> item mergeWith ((workers filter ($.Email == item.Email))[0]
                    default {IDInWorkday: "", NameInWorkday: "", UserNameInWorkday: ""}
                ))
            ) distinctBy $.Email
fun sortBySourceExistence (items) = ((items map (item) -> (
        item ++ {
            sortValue:  if ((item.IDInWorkday != "") and (item.IDInSAP == "")) 1
                        else if ((item.IDInSAP != "") and (item.IDInWorkday == "")) 2
                        else 3
        }
    )
) orderBy $.sortValue ) map $ -"sortValue"
---
sortBySourceExistence(mergedItems) map (item) -> {
	"Email": item.Email,
	"IDInWorkday": item.IDInWorkday,
	"NameInWorkday": item.NameInWorkday,
	"UserNameInWorkday": item.UserNameInWorkday,
	"IDInSAP": item.IDInSAP,
	"NameInSAP": item.NameInSAP,
	"UserNameInSAP": item.UserNameInSAP
}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
		<email:send config-ref="Gmail_SMTP" doc:name="Send migration result email" fromAddress="${mail.from}"
                    subject="${mail.subject}">
            <email:to-addresses>
                <email:to-address value="${mail.to}"/>
            </email:to-addresses>
            <email:body contentType="text/plain">
                <email:content><![CDATA[${mail.body}]]></email:content>
            </email:body>
            <email:attachments><![CDATA[#[{'${attachment.name}' : payload}]]]></email:attachments>
        </email:send>
    </flow>
	<flow name="mainFlow">
        <flow-ref doc:name="Call businesslogicFlow" name="businesslogicFlow"/>
        <error-handler>
            <on-error-propagate enableNotifications="true" logException="true" doc:name="On Error Propagate" type="ANY">
                <flow-ref doc:name="errorHandlingFlow" name="errorHandlingFlow"/>
            </on-error-propagate>
        </error-handler>
    </flow>

</mule>

        